(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-0043326e"],{"4c41":function(e,t,o){"use strict";function s({mustBeMetaMask:e=!1,silent:t=!1,timeout:o=3e3}={}){i();let s=!1;return new Promise(i=>{function n(){if(s)return;s=!0,window.removeEventListener("ethereum#initialized",n);const{ethereum:o}=window;if(!o||e&&!o.isMetaMask){const s=e&&o?"Non-MetaMask window.ethereum detected.":"Unable to detect window.ethereum.";!t&&console.error("@metamask/detect-provider:",s),i(null)}else i(o)}window.ethereum?n():(window.addEventListener("ethereum#initialized",n,{once:!0}),setTimeout(()=>{n()},o))});function i(){if("boolean"!==typeof e)throw new Error("@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.");if("boolean"!==typeof t)throw new Error("@metamask/detect-provider: Expected option 'silent' to be a boolean.");if("number"!==typeof o)throw new Error("@metamask/detect-provider: Expected option 'timeout' to be a number.")}}e.exports=s},e793:function(e,t,o){"use strict";o.r(t);var s=function(){var e=this,t=e._self._c;return t("div",{staticClass:"metamask-checker"})},i=[],n=(o("14d9"),o("4c41")),r=o.n(n),c={data(){return{checkInProgress:!0,statementShow:!1}},computed:{availableNetworks(){return this.$store.getters.getAvailableNetworks},walletIsConnected(){return this.$store.getters.getWalletIsConnected},chainId(){return this.$store.getters.getChainId}},watch:{walletIsConnected(e){e&&!this.checkInProgress&&(this.compareNetworkSupport(this.chainId),this.setAccountListeners(),this.$emit("checkSuccess"))}},methods:{async checkProvider(){const e=await r()();if(!e)return this.$store.commit("setPopupState",{type:"browser",isShow:!0}),this.$emit("checkError","Please install MetaMask!"),!1;if(e!==window.ethereum)return this.$emit("checkError","Do you have multiple wallets installed?"),!1;const t=new this.$ethers.providers.Web3Provider(window.ethereum),o=t.getSigner();this.$store.commit("setMetamaskActive",!0),this.$store.commit("setProvider",t),this.$store.commit("setSigner",o),await this.checkConnection()},async checkConnection(){const e=await this.$store.dispatch("fetchAccount",window.ethereum);if(!e)return this.$emit("checkError",""),this.checkInProgress=!1,!1;this.$store.commit("setWalletConnection",!0);const t=await this.$store.dispatch("fetchChainId",window.ethereum);this.compareNetworkSupport(t),this.setAccountListeners(),this.checkInProgress=!1,this.$emit("checkSuccess")},compareNetworkSupport(e){const t=this.availableNetworks.find(t=>t.chainId===e);if("0x3f"!==e){this.$store.commit("setPopupState",{type:"wrong-network",isShow:!0});const e=this.$route.name;"Home"!==e&&this.$router.push({name:"Home"})}t&&this.$store.commit("setActiveNetwork",e)},setAccountListeners(){window.ethereum.on("chainChanged",this.onChainIdChange),window.ethereum.on("accountsChanged",this.onAccountChange)},onAccountChange(e){0===e.length?this.disconnectHandler():this.$store.commit("setAccount",e[0])},onChainIdChange(){window.location.reload()},disconnectHandler(){this.$store.commit("closePopups"),this.$store.commit("setAccount",null),this.$store.commit("setWalletConnection",!1),this.$store.commit("setChainId",null),this.$store.commit("setActiveNetwork","0x1"),this.$store.commit("setFarmPools",[]),this.$store.commit("setPools",[]),this.$store.commit("setSwapObject",null);const e=this.$route.name;"Home"!==e&&this.$router.push({name:"Home"}),this.$emit("checkError","Please connect to MetaMask.")}},created(){this.statementShow&&(this.$store.commit("setPopupState",{type:"statement-init",isShow:!0}),this.statementShow=!0),this.checkProvider()}},a=c,h=o("2877"),m=Object(h["a"])(a,s,i,!1,null,null,null);t["default"]=m.exports}}]);